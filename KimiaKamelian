'makeCacheMatrix' creates a special matrix object that can cache its inverse. 
makeCacheMatrix <- function(q = matrix()) {
  inv <- NULL
  set <- function(z) {
    q <<-z
    inv <<- NULL
  }
  get <- function() q
  setinv <- function(inverse) inv <<-inverse
  getinv <- function() inv
  list(set = set, get = get, setinv = setinv, getinv = getinv)
}


The cacheSolve function conputes the inverse of the special 'matrix' made by the makeCacheMatrix. 
If the inverse has already been calculated, then the cachesolve should retrieve the inverse from the cache. 

cacheSolve <- function(q,...) {
  inv <-q$getinv()
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  else {
    data <- q$get()
    inv <- solve(data,...)
    q$setinv(inv)
    inv
  }
}
